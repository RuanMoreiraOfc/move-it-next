.experienceBarContainer
{
    display: flex;
    align-items: center;
}

.experienceBarContainer span
{
    font-size: 1rem;
}

.experienceBarContainer > div
{
    flex: 1;
    height: 4px;

    border-radius: 4px;
    
    background-color: var(--color_gray_line);

    position: relative;
    margin: 0 1.5rem;
}

span.hasPulser.onRender
{
    animation-duration: var(--duration_on_render);
}

span.hasPulser
{
    animation-name: play_text_pulse;
    animation-duration: var(--duration_pos_render);
}

@keyframes play_text_pulse
{
    50% {
        transform: scale(1.5);
        font-weight: bolder;
    }
    to {
        transform: scale(1);
        font-weight: normal;
    }
}

div.experienceBar
{
    width: var(--startPoint);
    height: inherit;

    background-color: var(--color_green);

    animation-name: play_scaling_up;
}

span.currentExperience
{
    white-space: nowrap;
    
    position: absolute;
    top: 12px;
    left: var(--startPoint);
    transform: translateX(-50%);

    animation-name: play_moving_up;
}

div.experienceBar, span.currentExperience
{
    animation-fill-mode: forwards;
    animation-timing-function: ease-out;
}

/* #region DYNAMIC COUNTER( ONLY ON CHROMIUM SO FAR ) */

@property --exp
{
    syntax: '<integer>';
    initial-value: 0;
    inherits: false;
}

span.currentExperience.hasCounter
{
    color: inherit !important;
    counter-reset: exp var(--exp);
}

span.currentExperience.hasCounter::after
{
    content: counter(exp) ' exp';
}

/* #endregion */

@keyframes play_scaling_up
{
    from {
        width: var(--startPoint);
    }
    to {
        width: var(--endPoint);
    }
}

@keyframes play_moving_up
{
    from {
        left: var(--startPoint);
        --exp: var(--lastExp);
    }
    to {
        left: var(--endPoint);
        --exp: var(--currentExp);
    }
}